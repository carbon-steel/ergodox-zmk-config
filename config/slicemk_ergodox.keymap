#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/backlight.h>

#define LAYER_MAIN 0
#define LAYER_MAC 1
#define LAYER_SYMBOLS 2
#define LAYER_MOVE 3
#define LAYER_MACMOVE 4
#define LAYER_NUMBERS 5
#define LAYER_OFF 6

#define DUMMY 0

&lt {
	flavor = "balanced";
	tapping_term_ms = <220>;
};
&sl {
	/delete-property/ quick-release;
};

/ {
	macros {
		// I introduced these for a reason but I can't remember why. They were for when I had dedicated keys for braces/brackets.
		ZMK_MACRO(macro_right_brace, wait-ms = <0>; tap-ms = <0>; bindings = <&macro_tap &kp RIGHT_BRACE>;)
		ZMK_MACRO(macro_left_brace, wait-ms = <0>; tap-ms = <0>; bindings = <&macro_tap &kp LEFT_BRACE>;)
		ZMK_MACRO(macro_right_bracket, wait-ms = <0>; tap-ms = <0>; bindings = <&macro_tap &kp RIGHT_BRACKET>;)
		ZMK_MACRO(macro_left_bracket, wait-ms = <0>; tap-ms = <0>; bindings = <&macro_tap &kp LEFT_BRACKET>;)

		ZMK_MACRO(macro_to_mac, wait-ms = <0>; tap-ms = <5>; bindings = <&to LAYER_MAC &rgb_ug RGB_COLOR_HSB(128,100,100) &rgb_ug RGB_TOG &bl BL_TOG>;)
		ZMK_MACRO(macro_to_linux, wait-ms = <0>; tap-ms = <5>; bindings = <&to LAYER_MAIN &rgb_ug RGB_TOG &bl BL_TOG>;)
		ZMK_MACRO(macro_shift_j, wait-ms = <0>; tap-ms = <0>; bindings = <&macro_press &kp LSHIFT>, <&macro_tap &kp J>, <&macro_pause_for_release>, <&macro_release &kp LSHIFT>;)
		ZMK_MACRO1(macro_left_shift_hold, wait-ms = <0>; tap-ms = <0>; bindings
				= <&macro_tap &sk LSHIFT>
				, <&macro_param_1to1>
				, <&macro_press &kp MACRO_PLACEHOLDER>
				, <&macro_pause_for_release>
				, <&macro_param_1to1>
				, <&macro_release &kp MACRO_PLACEHOLDER>;)
		ZMK_MACRO1(macro_num_hold, wait-ms = <0>; tap-ms = <0>; bindings
				= <&macro_tap &sl LAYER_NUMBERS>
				, <&macro_param_1to1>
				, <&macro_press &kp MACRO_PLACEHOLDER>
				, <&macro_pause_for_release>
				, <&macro_param_1to1>
				, <&macro_release &kp MACRO_PLACEHOLDER>;)
		ZMK_MACRO1(macro_sym_hold, wait-ms = <0>; tap-ms = <0>; bindings
				= <&macro_tap &sl LAYER_SYMBOLS>
				, <&macro_param_1to1>
				, <&macro_press &kp MACRO_PLACEHOLDER>
				, <&macro_pause_for_release>
				, <&macro_param_1to1>
				, <&macro_release &kp MACRO_PLACEHOLDER>;)
	};
	behaviors {
		off: disable {
		    compatible = "zmk,behavior-tap-dance";
		    label = "DISABLE";
		    tapping-term-ms = <200>;
		    #binding-cells = <0>;
		    bindings = <&none>, <&none>, <&to LAYER_OFF>;
		};
		on: enable {
		    compatible = "zmk,behavior-tap-dance";
		    label = "ENABLE";
		    tapping-term-ms = <200>;
		    #binding-cells = <0>;
		    bindings = <&none>, <&none>, <&to LAYER_MAIN>;
		};
		bt_clear: bt_clear {
		    compatible = "zmk,behavior-tap-dance";
		    label = "BT_CLEAR";
		    tapping-term-ms = <200>;
		    #binding-cells = <0>;
		    bindings = <&none>, <&none>, <&bt BT_CLR>;
		};
	        bspc_del: backspace_delete {
	            compatible = "zmk,behavior-mod-morph";
		    label = "BACKSPACE_DELETE";
	            #binding-cells = <0>;
	            bindings = <&kp BACKSPACE>, <&kp DELETE>;
	            mods = <(MOD_LSFT|MOD_RSFT)>;
	        };
		// You cannot directly use a behavior with &lt so we need to express it as a new behavior.
		lt_bspc: layer_tap_bspc_del {
		    compatible = "zmk,behavior-hold-tap";
		    label = "LAYER_TAP_BACKSPACE_DELETE";
		    // hold-tap requires two parameters no matter what behaviors you intend for them to trigger
		    // so when you bind this you'll need a dummy placeholder for the second binding cell
		    #binding-cells = <2>;
		    bindings = <&mo>, <&bspc_del>;
		    tapping-term-ms = <200>;
		};
	        caps_tap: caps_tap {
	            compatible = "zmk,behavior-hold-tap";
	            label = "CAPS_TAP";
		    // hold-tap requires two parameters no matter what behaviors you intend for them to trigger
		    // so when you bind this you'll need a dummy placeholder for the second binding cell
	            #binding-cells = <2>;
	            bindings = <&kp>, <&caps_word>;
		    tapping-term-ms = <200>;
	            flavor = "tap-preferred";
	        };
	        hm: homerow_mods {
	            compatible = "zmk,behavior-hold-tap";
	            #binding-cells = <2>;
	            label = "HOMEROW_MOD";
	            tapping-term-ms = <200>;
		    quick-tap-ms = <200>;
		    // require-prior-idle-ms = <125>; need to upgrade version
	            flavor = "tap-preferred";
	            bindings = <&kp>, <&kp>;
	        };
	        mod_or_del: mod_or_del {
	            compatible = "zmk,behavior-hold-tap";
	            #binding-cells = <2>;
	            label = "MOD_OR_DELETE";
	            tapping-term-ms = <200>;
		    quick-tap-ms = <200>;
		    // require-prior-idle-ms = <125>; need to upgrade version
	            flavor = "tap-preferred";
	            bindings = <&kp>, <&bspc_del>;
	        };
	        om: outer_mods {
	            compatible = "zmk,behavior-hold-tap";
	            #binding-cells = <2>;
	            label = "OUTER_MOD";
	            tapping-term-ms = <200>;
		    quick-tap-ms = <200>;
		    // require-prior-idle-ms = <125>; need to upgrade version
	            flavor = "balanced";
	            bindings = <&kp>, <&kp>;
	        };
		ctrl_or_shift: control_or_shift {
            	    compatible = "zmk,behavior-tap-dance";
            	    #binding-cells = <0>;
		    label = "CONTROL_OR_SHIFT";
            	    tapping-term-ms = <250>;
            	    bindings = <&kp LEFT_SHIFT>, <&kp LEFT_CONTROL>, <&none>;
		};
		right_ctrl: right_control {
		    compatible = "zmk,behavior-tap-dance";
            	    #binding-cells = <0>;
		    label = "RIGHT_CONTROL";
            	    tapping-term-ms = <200>;
            	    bindings = <&macro_left_shift_hold LEFT_SHIFT>, <&kp RIGHT_CONTROL>, <&none>;
		};
		ht_in_td: hold_tap_in_tap_dance {
	            compatible = "zmk,behavior-hold-tap";
	            #binding-cells = <2>;
	            label = "HOLD_TAP_IN_TAP_DANCE";
	            tapping-term-ms = <1>; // The tap dance should provide the time needed to press both keys
	            flavor = "hold-preferred";
	            bindings = <&kp>, <&kp>;
		};
	};
	combo {
		compatible = "zmk,combos";
		// This combination of macro_left_shift_hold and partial_hold_position requires that the parameter
		// for partial_hold_position must be the key that you're actually holding down so that the partial hold is actually released when you let go of that key. 
		combo_apost {
			timeout-ms = <50>;
			key-positions = <29 40>;
			bindings = <&macro_left_shift_hold APOSTROPHE>, <&partial_hold_position 29>;
		};
		combo_Q {
			timeout-ms = <50>;
			key-positions = <16 40>;
			bindings = <&macro_left_shift_hold Q>; // Add the wait to prevent triggering the apostrophe
		};
		combo_W {
			timeout-ms = <50>;
			key-positions = <17 40>;
			bindings = <&macro_left_shift_hold W>;
		};
		combo_E {
			timeout-ms = <50>;
			key-positions = <18 40>;
			bindings = <&macro_left_shift_hold E>;
		};
		combo_R {
			timeout-ms = <50>;
			key-positions = <19 40>;
			bindings = <&macro_left_shift_hold R>;
		};
		combo_T {
			timeout-ms = <50>;
			key-positions = <20 40>;
			bindings = <&macro_left_shift_hold T>;
		};
		combo_Y {
			timeout-ms = <50>;
			key-positions = <23 29>;
			bindings = <&macro_left_shift_hold Y>, <&partial_hold_position 29>;
		};
		combo_U {
			timeout-ms = <50>;
			key-positions = <24 29>;
			bindings = <&macro_left_shift_hold U>, <&partial_hold_position 29>;
		};
		combo_I {
			timeout-ms = <50>;
			key-positions = <25 29>;
			bindings = <&macro_left_shift_hold I>, <&partial_hold_position 29>;
		};
		combo_O {
			timeout-ms = <50>;
			key-positions = <26 29>;
			bindings = <&macro_left_shift_hold O>, <&partial_hold_position 29>;
		};
		combo_P {
			timeout-ms = <50>;
			key-positions = <27 29>;
			bindings = <&macro_left_shift_hold P>, <&partial_hold_position 29>;
		};
		// I use the left shift withe the partial_hold_position since the right shift will trigger an apostrophe.
		combo_A {
			timeout-ms = <50>;
			key-positions = <30 40>;
			bindings = <&macro_left_shift_hold A>;
		};
		combo_S {
			timeout-ms = <50>;
			key-positions = <40 31>;
			bindings = <&macro_left_shift_hold S>;
		};
		combo_D {
			timeout-ms = <50>;
			key-positions = <40 32>;
			bindings = <&macro_left_shift_hold D>;
		};
		combo_F {
			timeout-ms = <50>;
			key-positions = <40 33>;
			bindings = <&macro_left_shift_hold F>;
		};
		combo_G {
			timeout-ms = <50>;
			key-positions = <40 34>;
			bindings = <&macro_left_shift_hold G>;
		};
		combo_colon {
			timeout-ms = <50>;
			key-positions = <40 39>;
			bindings = <&kp LS(SEMICOLON)>;
		};
		combo_H {
			timeout-ms = <50>;
			key-positions = <29 35>;
			bindings = <&macro_left_shift_hold H>, <&partial_hold_position 29>;
		};
		combo_J {
			timeout-ms = <50>;
			key-positions = <29 36>;
			bindings = <&macro_left_shift_hold J>, <&partial_hold_position 29>;
		};
		combo_K {
			timeout-ms = <50>;
			key-positions = <29 37>;
			bindings = <&macro_left_shift_hold K>, <&partial_hold_position 29>;
		};
		combo_L {
			timeout-ms = <50>;
			key-positions = <29 38>;
			bindings = <&macro_left_shift_hold L>, <&partial_hold_position 29>;
		};
		combo_Z {
			timeout-ms = <50>;
			key-positions = <40 42>;
			bindings = <&macro_left_shift_hold Z>;
		};
		combo_X {
			timeout-ms = <50>;
			key-positions = <40 43>;
			bindings = <&macro_left_shift_hold X>;
		};
		combo_C {
			timeout-ms = <50>;
			key-positions = <40 44>;
			bindings = <&macro_left_shift_hold C>;
		};
		combo_V {
			timeout-ms = <50>;
			key-positions = <40 45>;
			bindings = <&macro_left_shift_hold V>;
		};
		combo_B {
			timeout-ms = <50>;
			key-positions = <40 46>;
			bindings = <&macro_left_shift_hold B>;
		};
		combo_N {
			timeout-ms = <50>;
			key-positions = <29 49>;
			bindings = <&macro_left_shift_hold N>, <&partial_hold_position 29>;
		};
		combo_M {
			timeout-ms = <50>;
			key-positions = <29 50>;
			bindings = <&macro_left_shift_hold M>, <&partial_hold_position 29>;
		};

		combo_lparen {
			timeout-ms = <50>;
			key-positions = <18 61>;
			bindings = <&macro_num_hold LPAR>, <&partial_hold_position 61 &mo LAYER_NUMBERS>;
		};

		combo_rparen {
			timeout-ms = <50>;
			key-positions = <19 61>;
			bindings = <&macro_num_hold RPAR>, <&partial_hold_position 61 &mo LAYER_NUMBERS>;
		};

		combo_lbracket {
			timeout-ms = <50>;
			key-positions = <36 69>;
			bindings = <&macro_sym_hold LBKT>,  <&partial_hold_position 69 &mo LAYER_SYMBOLS>;
		};

		combo_rbracket {
			timeout-ms = <50>;
			key-positions = <37 69>;
			bindings = <&macro_sym_hold RBKT>,  <&partial_hold_position 69 &mo LAYER_SYMBOLS>;
		};

		combo_lbrace {
			timeout-ms = <50>;
			key-positions = <38 69>;
			bindings = <&macro_sym_hold LBRC>,  <&partial_hold_position 69 &mo LAYER_SYMBOLS>;
		};

		combo_rbrace {
			timeout-ms = <50>;
			key-positions = <39 69>;
			bindings = <&macro_sym_hold RBRC>,  <&partial_hold_position 69 &mo LAYER_SYMBOLS>;
		};

		combo_0 {
			timeout-ms = <50>;
			key-positions = <29 61>;
			bindings = <&macro_num_hold NUMBER_0>, <&partial_hold_position 61 &mo LAYER_NUMBERS>;
		};
		combo_1 {
			timeout-ms = <50>;
			key-positions = <30 61>;
			bindings = <&macro_num_hold NUMBER_1>, <&partial_hold_position 61 &mo LAYER_NUMBERS>;
		};
		combo_2 {
			timeout-ms = <50>;
			key-positions = <31 61>;
			bindings = <&macro_num_hold NUMBER_2>, <&partial_hold_position 61 &mo LAYER_NUMBERS>;
		};
		combo_3 {
			timeout-ms = <50>;
			key-positions = <32 61>;
			bindings = <&macro_num_hold NUMBER_3>, <&partial_hold_position 61 &mo LAYER_NUMBERS>;
		};
		combo_4 {
			timeout-ms = <50>;
			key-positions = <33 61>;
			bindings = <&macro_num_hold NUMBER_4>, <&partial_hold_position 61 &mo LAYER_NUMBERS>;
		};
		combo_5 {
			timeout-ms = <50>;
			key-positions = <36 61>;
			bindings = <&macro_num_hold NUMBER_5>, <&partial_hold_position 61 &mo LAYER_NUMBERS>;
		};
		combo_6 {
			timeout-ms = <50>;
			key-positions = <37 61>;
			bindings = <&macro_num_hold NUMBER_6>, <&partial_hold_position 61 &mo LAYER_NUMBERS>;
		};
		combo_7 {
			timeout-ms = <50>;
			key-positions = <38 61>;
			bindings = <&macro_num_hold NUMBER_7>, <&partial_hold_position 61 &mo LAYER_NUMBERS>;
		};
		combo_8 {
			timeout-ms = <50>;
			key-positions = <39 61>;
			bindings = <&macro_num_hold NUMBER_8>, <&partial_hold_position 61 &mo LAYER_NUMBERS>;
		};
		combo_9 {
			timeout-ms = <50>;
			key-positions = <40 61>;
			bindings = <&macro_num_hold NUMBER_9>, <&partial_hold_position 61 &mo LAYER_NUMBERS>;
		};
		combo_minus {
			timeout-ms = <50>;
			key-positions = <29 28>;
			bindings = <&macro_left_shift_hold MINUS>, <&partial_hold_position 29>;
		};
		combo_plus {
			timeout-ms = <50>;
			key-positions = <51 61>;
			bindings = <&macro_num_hold PLUS>, <&partial_hold_position 61 &mo LAYER_NUMBERS>;
		};
		combo_equal {
			timeout-ms = <50>;
			key-positions = <52 61>;
			bindings = <&macro_num_hold EQUAL>, <&partial_hold_position 61 &mo LAYER_NUMBERS>;
		};
		combo_exclam {
			timeout-ms = <50>;
			key-positions = <30 69>;
			bindings = <&kp EXCLAMATION>, <&partial_hold_position 69 &mo LAYER_SYMBOLS>;
		};
		combo_at {
			timeout-ms = <50>;
			key-positions = <31 69>;
			bindings = <&kp AT>, <&partial_hold_position 69 &mo LAYER_SYMBOLS>;
		};
		combo_pound {
			timeout-ms = <50>;
			key-positions = <32 69>;
			bindings = <&kp POUND>, <&partial_hold_position 69 &mo LAYER_SYMBOLS>;
		};
		combo_dollar {
			timeout-ms = <50>;
			key-positions = <33 69>;
			bindings = <&kp DOLLAR>, <&partial_hold_position 69 &mo LAYER_SYMBOLS>;
		};
		combo_percent {
			timeout-ms = <100>; // I tend to miss the percent combo so give it more time.
			key-positions = <34 69>;
			bindings = <&kp PERCENT>, <&partial_hold_position 69 &mo LAYER_SYMBOLS>;
		};
		combo_grav {
			timeout-ms = <50>;
			key-positions = <16 69>;
			bindings = <&kp GRAV>, <&partial_hold_position 69 &mo LAYER_SYMBOLS>;
		};
		combo_caret {
			timeout-ms = <50>;
			key-positions = <17 69>;
			bindings = <&kp CARET>, <&partial_hold_position 69 &mo LAYER_SYMBOLS>;
		};
		combo_amp {
			timeout-ms = <50>;
			key-positions = <18 69>;
			bindings = <&kp AMPERSAND>, <&partial_hold_position 69 &mo LAYER_SYMBOLS>;
		};
		combo_ast {
			timeout-ms = <50>;
			key-positions = <19 69>;
			bindings = <&kp ASTERISK>, <&partial_hold_position 69 &mo LAYER_SYMBOLS>;
		};
		combo_question {
			timeout-ms = <50>;
			key-positions = <29 53>;
			bindings = <&macro_left_shift_hold FSLH>, <&partial_hold_position 29>;
		};
		combo_backslash {
			timeout-ms = <50>;
			key-positions = <20 69>;
			bindings = <&kp BACKSLASH>, <&partial_hold_position 69 &mo LAYER_SYMBOLS>;
		};
		combo_DelWord {
			timeout-ms = <50>;
			key-positions = <50 60>;
			bindings = <&kp LC(BACKSPACE)>;
			layers = <LAYER_MAIN>;
		};
		combo_MacDelWord {
			timeout-ms = <50>;
			key-positions = <50 60>;
			bindings = <&kp LA(BACKSPACE)>;
			layers = <LAYER_MAC>;
		};
	};
	keymap {
		compatible = "zmk,keymap";
		layer_0 {
			bindings = <
				&bootloader
				&none                    &none              &none       &none                &none       &off    &on     &none &none  &none                         &none             &none        &none                      &none
				&kp TAB                  &kp Q              &kp W       &kp E                &kp R       &kp T   &none   &none &kp Y  &kp U                         &kp I             &kp O        &kp P                      &kp MINUS
				&kp LEFT_SHIFT           &hm LEFT_CONTROL A &hm LALT S  &kp D                &kp F       &kp G                 &kp H  &kp J                         &kp K             &hm RALT L   &hm LEFT_CONTROL SEMICOLON &om RIGHT_SHIFT APOSTROPHE
				&caps_tap LEFT_GUI DUMMY &kp Z              &kp X       &kp C                &kp V       &kp B   &none   &none &kp N  &kp M                         &kp CMMA          &kp DOT      &kp FSLH                   &caps_tap RIGHT_GUI DUMMY
				&none                    &none              &none       &mo LAYER_MOVE       &hm LEFT_CONTROL SPACE                   &mod_or_del RIGHT_CONTROL DUMMY  &mo LAYER_NUMBERS &out OUT_USB &out OUT_BLE               &none
				                                                                                                     &bt_clear &macro_to_mac &none &bt BT_SEL 0
				                                                                             &lt LAYER_SYMBOLS ENTER &none     &none         &none &none &lt LAYER_MOVE ESCAPE
				                                                                                                               &none         &none
			>;
		};
		layer_1 {
			bindings = <
				&bootloader
				&trans &trans          &trans &trans       &trans        &trans &trans         &trans        &trans                   &trans &trans &trans &trans                   &trans
				&trans &trans          &trans &trans       &trans        &trans &trans         &trans        &trans                   &trans &trans &trans &trans                   &trans
				&trans &hm LEFT_META A &trans &trans       &trans        &trans                              &trans                   &trans &trans &trans &hm RIGHT_META SEMICOLON &trans
				&trans &trans          &trans &trans       &trans        &trans &trans         &trans        &trans                   &trans &trans &trans &trans                   &trans
				&trans &trans          &trans &mo LAYER_MACMOVE &trans                                                    &trans &trans &trans &trans                   &trans
				                                                       &trans &macro_to_linux &trans       &trans
				                                         &trans        &trans &trans         &trans        &trans &lt LAYER_MACMOVE ESCAPE
				                                                              &trans         &trans
			>;
		};
		layer_2 {
			bindings = <
				&bootloader
				&trans &trans          &trans      &trans        &trans       &trans        &trans &trans &trans &trans &trans &trans &trans &trans
				&trans &kp GRAV        &kp CARET   &kp AMPERSAND &kp ASTERISK &kp BACKSLASH &trans &trans &trans &trans &trans &trans &trans &trans
				&trans &kp EXCLAMATION &kp AT_SIGN &kp HASH      &kp DOLLAR   &kp PERCENT                 &trans &macro_left_bracket &macro_right_bracket &macro_left_brace &macro_right_brace &trans
				&trans &trans          &trans      &trans        &trans       &trans        &trans &trans &trans &trans &trans &trans &trans &trans
				&trans &trans          &trans      &trans        &trans                                          &trans &trans &trans &trans &trans
				                                                              &trans        &trans &trans &trans
				                                                 &trans       &trans        &trans &trans &trans &trans
				                                                                            &trans &trans
			>;
		};
		layer_3 {
			bindings = <
				&bootloader
				&trans        &trans    &trans        &trans            &trans           &trans &trans &trans &trans         &trans         &trans        &trans          &trans &trans
				&kp LEFT_META &kp LG(L) &kp C_MUTE    &kp C_VOLUME_DOWN &kp C_VOLUME_UP  &trans &trans &trans &kp HOME       &kp LC(LEFT)   &kp LC(RIGHT) &kp END         &trans &trans
				&trans        &trans    &kp LC(TAB)   &kp LA(GRAV)      &kp LG(TAB)      &trans           &kp LEFT_ARROW &kp DOWN_ARROW &kp UP_ARROW  &kp RIGHT_ARROW &trans &trans
				&trans        &trans    &kp C_AC_BACK &kp C_AC_FORWARD  &kp C_PLAY_PAUSE &trans &trans &trans &trans         &trans         &trans        &trans          &trans &trans
				&trans        &trans    &trans        &trans            &trans                                          &trans         &trans        &trans          &trans &trans
				                                   &trans &trans &trans &trans
				                            &trans &trans &trans &trans &trans         &trans
				                                          &trans &trans
			>;
		};
		layer_4 {
			bindings = <
				&bootloader
				&trans       &trans        &trans      &trans            &trans            &trans &trans &trans &trans         &trans         &trans        &trans          &trans &trans
				&kp LC(DOWN) &kp LG(LC(Q)) &kp C_MUTE   &kp C_VOLUME_DOWN &kp C_VOLUME_UP  &trans &trans &trans &kp LG(LEFT)   &kp LA(LEFT)   &kp LA(RIGHT) &kp LG(RIGHT)   &trans &trans
				&trans       &trans        &kp LC(TAB)  &kp LG(GRAVE)     &kp LG(TAB)      &trans               &kp LEFT_ARROW &kp DOWN_ARROW &kp UP_ARROW  &kp RIGHT_ARROW &trans &trans
				&trans       &trans        &kp LG(LEFT) &kp LG(RIGHT)     &kp C_PLAY_PAUSE &trans &trans &trans &trans         &trans         &trans        &trans          &trans &trans
				&trans       &trans        &trans       &trans            &trans                                               &trans         &trans        &trans          &trans &trans
				                                   &trans &trans &trans &trans
				                            &trans &trans &trans &trans &trans         &trans
				                                          &trans &trans
			>;
		};
		layer_5 {
			bindings = <
				&bootloader
				&trans       &trans       &trans       &trans               &trans                &trans   &trans &trans  &trans        &trans               &trans                &trans       &trans       &trans
				&trans       &trans       &trans       &trans               &trans                &trans   &trans &trans  &trans        &kp LEFT_PARENTHESIS &kp RIGHT_PARENTHESIS &kp PLUS     &kp EQUAL    &trans
				&kp NUMBER_0 &kp NUMBER_1 &kp NUMBER_2 &kp NUMBER_3         &kp NUMBER_4          &trans                  &trans        &kp NUMBER_5         &kp NUMBER_6          &kp NUMBER_7 &kp NUMBER_8 &kp NUMBER_9
				&trans       &trans       &trans       &trans               &trans                &trans   &trans &trans  &trans        &trans               &trans                &trans       &trans       &trans
				&trans       &trans       &trans       &trans               &trans                                                      &trans               &trans                &trans       &trans       &trans
				                                                                 &trans &trans &trans &trans
				                                                    &trans       &trans &trans &trans &trans &trans
				                                                                        &trans &trans

			>;
		};
		layer_6 {
			bindings = <
				&bootloader
				&none        &none        &none        &none        &none        &none  &trans &none  &none  &none        &none        &none        &none        &none 
				&none        &none        &none        &none        &none        &none  &none  &none  &none  &none        &none        &none        &none        &none 
				&none  	     &none        &none        &none        &none        &none                &none  &none        &none        &none        &none        &none 
				&none        &none        &none        &none        &none        &none  &none  &none  &none  &none        &none        &none        &none        &none 
				&none        &none        &none        &none        &none                                    &none        &none        &none        &none        &none 
				                                                                 &none  &none  &none  &none 
				                                                    &none        &none  &none  &none  &none  &none 
				                                                                        &none  &none 
			>;
		};
	};

};
